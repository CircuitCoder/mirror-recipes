{"version":3,"sources":["webpack:///./routes/Home.scss","webpack:///../node_modules/clsx/dist/clsx.m.js","webpack:///./routes/Home.tsx"],"names":["module","exports","toVal","mix","k","y","str","Array","isArray","length","tmp","x","i","arguments","Home","class","style","banner","container","title","buttons","href","clsx","button","primary","tldr","sub"],"mappings":"0EACAA,EAAOC,QAAU,CAAC,UAAY,mBAAmB,MAAQ,eAAe,YAAY,mBAAmB,IAAM,aAAa,KAAO,cAAc,WAAa,oBAAoB,OAAS,gBAAgB,OAAS,gBAAgB,QAAU,iBAAiB,QAAU,iBAAiB,KAAO,cAAc,IAAM,e,gCCDnT,SAASC,EAAMC,GACd,IAAIC,EAAGC,EAAGC,EAAI,GAEd,GAAmB,iBAARH,GAAmC,iBAARA,EACrCG,GAAOH,OACD,GAAmB,iBAARA,EACjB,GAAII,MAAMC,QAAQL,GACjB,IAAKC,EAAE,EAAGA,EAAID,EAAIM,OAAQL,IACrBD,EAAIC,KACHC,EAAIH,EAAMC,EAAIC,OACjBE,IAAQA,GAAO,KACfA,GAAOD,QAKV,IAAKD,KAAKD,EACLA,EAAIC,KACPE,IAAQA,GAAO,KACfA,GAAOF,GAMX,OAAOE,EAGO,eAEd,IADA,IAASI,EAAKC,EAAVC,EAAE,EAAWN,EAAI,GACdM,EAAIC,UAAUJ,SAChBC,EAAMG,UAAUD,QACfD,EAAIT,EAAMQ,MACbJ,IAAQA,GAAO,KACfA,GAAOK,GAIV,OAAOL,I,kCCtCR,oEAqGeQ,UAhGmB,IAE9B,YAAC,WAAD,KACE,mBAAKC,MAAOC,IAAMC,QAChB,mBAAKF,MAAOC,IAAME,WAChB,mBAAKH,MAAOC,IAAMG,OAAlB,kBACA,mBAAKJ,MAAOC,IAAMI,SAChB,iBAAGC,KAAK,2DACN,sBAAQN,MAAOO,YAAKN,IAAMO,OAAQP,IAAMQ,UAAxC,oBAIF,YAAC,IAAD,CAAMH,KAAK,WACT,sBAAQN,MAAOC,IAAMO,QAArB,oBAEF,iBAAGF,KAAK,kDACN,sBAAQN,MAAOC,IAAMO,QAArB,cAOR,mBAAKR,MAAOC,IAAME,WAChB,mBAAKH,MAAOC,IAAMS,MAChB,qBACE,iBAAGJ,KAAK,kDAAR,kBAEK,IAHP,0DAI0D,IACxD,6EALF,+BAOE,sBACE,kEACA,uFAGA,yDAKN,mBAAKN,MAAOC,IAAMU,KAAlB,SAEA,mEAEE,sBACE,qJAIA,kGAIA,4GAOJ,4CACsB,qDADtB,6LAIyC,IACvC,oDALF,0FASA,mBAAKX,MAAOC,IAAMU,KAAlB,gBAEA,kSAOA,0JAEmE,IACjE,kCAHF,wBAG0C,gCAH1C,gCAOA,+DACyC,sCADzC,WAEE,iBAAGL,KAAK,kDAAR,yBAFF","file":"route-Home.chunk.8435a.esm.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container__3aHDU\",\"title\":\"title__51rU6\",\"title-row\":\"title-row__A5KHy\",\"sep\":\"sep__2vA5P\",\"hint\":\"hint__vON0K\",\"breadcrumb\":\"breadcrumb__3Z2eO\",\"banner\":\"banner__2DpRy\",\"button\":\"button__OEVpU\",\"primary\":\"primary__3C8bN\",\"buttons\":\"buttons__33s12\",\"tldr\":\"tldr__F6KuF\",\"sub\":\"sub__2gVta\"};","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","import { FunctionalComponent, h, Fragment } from \"preact\";\nimport style from './Home.scss';\nimport clsx from 'clsx';\nimport { Link } from \"preact-router\";\n\nconst Home: FunctionalComponent = () => {\n  return (\n    <Fragment>\n      <div class={style.banner}>\n        <div class={style.container}>\n          <div class={style.title}>mirror-recipes</div>\n          <div class={style.buttons}>\n            <a href=\"https://github.com/CircuitCoder/mirror-recipes/releases\">\n              <button class={clsx(style.button, style.primary)}>\n                Download Driver\n              </button>\n            </a>\n            <Link href=\"/recipe\">\n              <button class={style.button}>Explore Recipes</button>\n            </Link>\n            <a href=\"https://github.com/CircuitCoder/mirror-recipes\">\n              <button class={style.button}>\n                GitHub\n              </button>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div class={style.container}>\n        <div class={style.tldr}>\n          <p>\n            <a href=\"https://github.com/CircuitCoder/mirror-recipes\">\n              mirror-recipes\n            </a>{\" \"}\n            is a project aiming to produce a general description of{\" \"}\n            <strong>procedures to apply various open source mirrors</strong>, so\n            that it can be used as:\n            <ul>\n              <li>a source format to render documentations</li>\n              <li>\n                a script to apply mirrors automatically to one's installation\n              </li>\n              <li>directly readable references</li>\n            </ul>\n          </p>\n        </div>\n\n        <div class={style.sub}>Scope</div>\n\n        <p>\n          In the box there are three main components:\n          <ul>\n            <li>\n              Recipes themself, containing procudures, parameter presets for\n              well-known mirror sites and JSON schemas for validating them\n            </li>\n            <li>\n              A driver written in Rust for applying recipes on Linux/Unix\n              environments\n            </li>\n            <li>\n              A preact component with Custom Element wrapper for rendering\n              recipes in webpages\n            </li>\n          </ul>\n        </p>\n\n        <p>\n          What's considered a <em>open source software mirror</em> is hard to\n          define. But generally speaking, you can expect to find repositories\n          and update sites of Linux distributions, utilitites (e.g. TexLive),\n          etc. as those are mirrors that you can{\" \"}\n          <em>apply to your installation</em>. Other forms of mirrors (Fonts,\n          ISO images) are not within the scope of this project.\n        </p>\n\n        <div class={style.sub}>Contributing</div>\n\n        <p>\n          This project is still in early development, so the recipe formats and\n          API are subject to severe changes. That said, we welcome contributions\n          of all forms, especially for recipes and site presets, as well as\n          procedures in existing recipes for lesser-known platforms.\n        </p>\n\n        <p>\n          To add a new recipe or preset, a short-name/slug would have to be\n          allocated for it. Please use the generally agreed on names (e.g.{\" \"}\n          <code>ubuntu</code> for Ubuntu package, <code>TUNA</code> for Tsinghua\n          TUNA Mirrors).\n        </p>\n\n        <p>\n          For more guidance, please refer to the <code>CONTRIBUTE</code> file in\n          <a href=\"https://github.com/CircuitCoder/mirror-recipes\">the GitHub repository</a>.\n        </p>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}